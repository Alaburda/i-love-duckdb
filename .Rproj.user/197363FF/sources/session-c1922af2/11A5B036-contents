---
title: "I Love DuckDB"
author: "Paulius Alaburda"
format: revealjs
engine: knitr
webr: 
  show-startup-message: false
filters:
  - webr
---

```{r}
#| echo: true
#| warning: false
#| message: false

library(duckdb)
library(DBI)
library(dplyr)
library(duckplyr)
library(bench)
library(ggplot2)
options(duckdb.materialize_message = FALSE)

lineitem <- as_tibble(duckdb:::sql("INSTALL tpch; LOAD tpch; CALL dbgen(sf=1); FROM lineitem;"))

con <- dbConnect(duckdb())

duckdb_register(con, name = "lineitem", df = lineitem)

```


## Quarto

Quarto enables you to weave together content and executable code into a finished presentation. To learn more about Quarto presentations see <https://quarto.org/docs/presentations/>.

## Kas yra DuckDB?

-   In-process SQL OLAP duomenų bazė sukurta [DuckDB Labs](https://duckdblabs.com/)
-   Parašyta su C++, neturi priklausonių ir turi wrapper'ius populiariose programavimo kalbose, įskaitant R.
-   Nemokama!

## DuckDB skaito greitai

Paimkime pavyzdį, kur palyginame `readr::read_csv2`, DuckDB užklausą perskaityti csv failą ir `data.table::fread` funkciją.

```{r}

# con <- dbConnect(duckdb())
# 
# read_benchmark <- bench::mark(
#   min_iterations = 10,
#   duckdb_csv = dbGetQuery(con, "select * from '../data/nyc-taxi-year-2019-h1.csv'"),
#   duckdb_parquet = dbGetQuery(con, "select * from read_parquet('data/**/*.parquet') where year = 2019 and month in (1,2)"), 
#   readr_csv = readr::read_csv2("../data/nyc-taxi-year-2019-h1.csv"),
#   data.table_csv = data.table::fread("../data/nyc-taxi-year-2019-h1.csv", sep = ";"),
#   check = FALSE
# )

```

## DuckDB apdirba duomenis LABAI greitai!

Grafikas su benchmark, kur palygintas arrow, dplyr ir DuckDB

## #1: plikas SQL

DuckDB, kaip ir visos DB leidžia, įsirašyti lentelę ir su dirbti.

## #2:

# R lėtai agreguoja :(

```{r}


# bnch <- bench::mark(
#   min_iterations = 10,
#   rs_duckdb %>% 
#     as_duckplyr_df() %>% 
#     group_by(month) %>% 
#     summarise(all_trips = n(),
#               )
#     
#   
#   
#   
# nyc_taxi |> 
#     dplyr::group_by(year) |> 
#     dplyr::summarise(all_trips = n(),
#                      shared_trips = sum(passenger_count > 1, na.rm = T)) |>
#     dplyr::mutate(pct_shared = shared_trips / all_trips * 100) |> 



```

```{r}

# library(duckdb)
# 
# con <- dbConnect(duckdb())
# 
# dbSendStatement(con, "COPY (select * from read_parquet('data/**/*.parquet') where month = 7) TO 'nyc-taxi-month-7.csv' (HEADER, DELIMITER ';');")






```

## Iš kur gauti duomenis?

Šiandien dirbsime su 2017-2019 m. Niu Jorko taksi duomenimis. Daugiau apie juos galima sužinoti [čia](https://arrow.apache.org/docs/r/articles/dataset.html). Duomenys yra saugomi S3 kaip parquet failai. Duomenis galima pasiekti su `arrow` biblioteka.

```{r}
#| eval: false
#| echo: true

library(bench)
library(arrow)

# Connect to dataset and write data
# to a partitioned Parquet file:
ds <- open_dataset("s3://voltrondata-labs-datasets/nyc-taxi")

ds %>% 
  filter(year %in% 2017:2019) %>% 
  write_dataset("data", partitioning = c("year", "month"))
```

# Ką parsisiuntėme?

```{r}
#| eval: false


arrow::open_dataset("data")

```

## Kas yra DuckDB?

-   In-memory OLAP duomenų bazės sistema
-   Jokių priklausinių - tai gryna C++ biblioteka!
-   APIs: C++, Python, R, Java, Go, Rust, Julia...
-   Nemokamas!!

## Paprastas pavyzdys - .csv failas

```{r}
#| eval: false

library(duckdb)
library(odbc)

con <- dbConnect(duckdb::duckdb(), ":memory:")



```

# Arrow nuoroda į

# DuckDB connection

```{r}
#| eval: false

library(duckdb)
library(odbc)

con <- dbConnect(duckdb::duckdb(), ":memory:")

dbGetQuery(con, "select count(*) from read_parquet('data/**/*.parquet')")

```

```{r}
#| eval: false


nyc_dataset = open_dataset("data/", partitioning = c("year", "month"))

duckdb::duckdb_register_arrow(con, "nyc", nyc_dataset)

res <- dbSendQuery(con, "SELECT * FROM nyc", arrow = TRUE)

dbGetQuery(con, "SELECT count(*) FROM nyc", arrow = TRUE)


con <- dbConnect(duckdb::duckdb(), ":memory:")

dbGetQuery(con, "select count(*) from read_parquet('data/**/*.parquet')")

```

```{r}
#| eval: false

nyc_dataset %>% 
  arrow::to_duckdb(con) %>% 
  group_by(year) %>% 
  dplyr::summarise(all_trips = n(),
                   shared_trips = sum(passenger_count, na.rm = T)) |>
  dplyr::mutate(pct_shared = shared_trips / all_trips * 100) |> 
  dplyr::collect()


```

# Links

https://gist.github.com/tjmahr/4c9b2997e1558f6eacf6a278145701db

# collect()

# compute()

## collapse()

## duckplyr - naujas vaikis rajone

-   Posit ir DuckDB Labs kartu kuria biblioteką, su kuria reikės tik vieno eilutės pakeitimo.
-   duckplyr naudoja DuckDB relational API tiesiogiai - nesinaudoja DuckDB SQL sąsaja
-   Kai duckplyr negali išversti dplyr kodo į DuckDB, tiesiog naudoja R variklį

![](images/clipboard-3537356486.png)

## duckplyr sintaksė

```{r}
#| eval: false
#| code-line-numbers: "1-4|2"

lineitem %>% 
  as_duckplyr_df() %>% 
  group_by(l_returnflag, l_linestatus) %>%
  summarise(sum_qty = sum(l_quantity))

```


## TPCH Query 1 greitis

::: panel-tabset

## Query 1

```{r}
#| eval: true
#| echo: true
#| code-line-numbers: "1-16|14"

tpch_01 <- function(lineitem) {
  lineitem |>
    select(l_shipdate, l_returnflag, l_linestatus, l_quantity, l_extendedprice, l_discount, l_tax) |>
    filter(l_shipdate <= !!as.Date("1998-09-02")) |>
    select(l_returnflag, l_linestatus, l_quantity, l_extendedprice, l_discount, l_tax) |>
    summarise(
      sum_qty = sum(l_quantity),
      sum_base_price = sum(l_extendedprice),
      sum_disc_price = sum(l_extendedprice * (1 - l_discount)),
      sum_charge = sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)),
      avg_qty = mean(l_quantity),
      avg_price = mean(l_extendedprice),
      avg_disc = mean(l_discount),
      count_order = n(),
      .by = c(l_returnflag, l_linestatus)
    ) |>
    arrange(l_returnflag, l_linestatus)
}

```

## duckplyr be R fallback

```{r}
#| eval: true
#| echo: false
#| code-line-numbers: "1-16|14"

tpch_query_1 <- mark(
  min_iterations = 10,
  dplyr = tpch_01(lineitem),
  duckplyr = tpch_01(as_duckplyr_df(lineitem)),
  duckdb = tbl(con, "lineitem") %>% tpch_01(), 
  check = FALSE
)

autoplot(tpch_query_1) + 
  theme(axis.text.x = element_text(size = 17),
        axis.text.y = element_text(size = 17)) + 
  labs(title = "TPC-H Query 1 rezultatai", 
       subtitle = glue::glue("dplyr mediana {tpch_query_1$median[names(tpch_query_1$expression) == 'dplyr']}, duckplyr mediana {tpch_query_1$median[names(tpch_query_1$expression) == 'duckplyr']}, duckdb mediana {tpch_query_1$median[names(tpch_query_1$expression) == 'duckdb']}"))

```

## duckplyr su R fallback

```{r}
#| eval: true
#| echo: false
#| message: false

tpch_01_na <- function(lineitem) {
  lineitem |>
    select(l_shipdate, l_returnflag, l_linestatus, l_quantity, l_extendedprice, l_discount, l_tax) |>
    filter(l_shipdate <= !!as.Date("1998-09-02")) |>
    select(l_returnflag, l_linestatus, l_quantity, l_extendedprice, l_discount, l_tax) |>
    summarise(
      sum_qty = sum(l_quantity, na.rm = TRUE),
      sum_base_price = sum(l_extendedprice),
      sum_disc_price = sum(l_extendedprice * (1 - l_discount)),
      sum_charge = sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)),
      avg_qty = mean(l_quantity),
      avg_price = mean(l_extendedprice),
      avg_disc = mean(l_discount),
      count_order = n(),
      .by = c(l_returnflag, l_linestatus)
    ) |>
    arrange(l_returnflag, l_linestatus)
}

tpch_query_1 <- mark(
  min_iterations = 10,
  dplyr = tpch_01_na(lineitem),
  duckplyr = tpch_01_na(suppressMessages(as_duckplyr_df(lineitem))),
  duckdb = tbl(con, "lineitem") %>% tpch_01_na(), 
  check = FALSE
)

autoplot(tpch_query_1) + 
  labs(title = "TPC-H Query 1 rezultatai", 
       subtitle = glue::glue("dplyr mediana {tpch_query_1$median[names(tpch_query_1$expression) == 'dplyr']}, duckplyr mediana {tpch_query_1$median[names(tpch_query_1$expression) == 'duckplyr']}, duckdb mediana {tpch_query_1$median[names(tpch_query_1$expression) == 'duckdb']}"))

```
:::

## DuckDB plėtiniai (extensions)

DuckDB galima išplėsti su [plėtiniais](https://duckdb.org/docs/extensions/overview.html). Pavyzdžiui, `httpfs` leidžia skaityti nuotolinius .parquet failus:

```{r}

dataset <- "https://static.data.gouv.fr/resources/bureaux-de-vote-et-adresses-de-leurs-electeurs/20230626-135723/table-adresses-reu.parquet"

dbExecute(con, "INSTALL httpfs;")
dbExecute(con, "LOAD httpfs;")

dbSendQuery(cnx, glue("
  CREATE VIEW bureaux AS
    SELECT * 
    FROM '{dataset}'"))

dbGetQuery(cnx, "
  DESCRIBE bureaux")



```

::: footer
iresmi.net, [Fast Remote Parquet](https://r.iresmi.net/posts/2023/fast_remote_parquet/)
:::

