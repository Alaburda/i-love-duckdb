{
    "type": [
        2,
        2,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        3,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        3,
        2
    ],
    "data": [
        "\nR version 4.3.2 (2023-10-31 ucrt) -- \"Eye Holes\"\nCopyright (C) 2023 The R Foundation for Statistical Computing\nPlatform: x86_64-w64-mingw32/x64 (64-bit)\n\nR is free software and comes with ABSOLUTELY NO WARRANTY.\nYou are welcome to redistribute it under certain conditions.\nType 'license()' or 'licence()' for distribution details.\n\nR is a collaborative project with many contributors.\nType 'contributors()' for more information and\n'citation()' on how to cite R or R packages in publications.\n\nType 'demo()' for",
        " some demos, 'help()' for on-line help, or\n'help.start()' for an HTML browser interface to help.\nType 'q()' to quit R.\n\n",
        "> ",
        "con <- dbConnect(duckdb())",
        "Error in dbConnect(duckdb()) : could not find function \"dbConnect\"\n",
        "> ",
        "library(duckdb)",
        "Loading required package: DBI\nWarning message:\npackage ‘DBI’ was built under R version 4.3.3 \n",
        "> ",
        "library(odbc)",
        "Warning message:\npackage ‘odbc’ was built under R version 4.3.3 \n",
        "> ",
        "library(dplyr)",
        "\nAttaching package: ‘dplyr’\n\nThe following objects are masked from ‘package:stats’:\n\n    filter, lag\n\nThe following objects are masked from ‘package:base’:\n\n    intersect, setdiff, setequal, union\n\n",
        "> ",
        "duckdb_parquet = dbGetQuery(con, \"select * from read_parquet('data/**/*.parquet') where year = 2019 and month < 7\")",
        "Error in h(simpleError(msg, call)) : \n  error in evaluating the argument 'conn' in selecting a method for function 'dbGetQuery': object 'con' not found\n",
        "> ",
        "con <- dbConnect(duckdb())",
        "> ",
        "duckdb_parquet = dbGetQuery(con, \"select * from read_parquet('data/**/*.parquet') where year = 2019 and month < 7\")",
        "> ",
        "rm(duckdb_parquet)",
        "> ",
        "invisible(gc())",
        "> ",
        "duckdb_parquet = dbGetQuery(con, \"select * from read_parquet('data/**/*.parquet') where year = 2019 and month = 7\")",
        "> ",
        "duckdb_parquet = dbGetQuery(con, \"select * from read_parquet('data/**/*.parquet') where year = 2019 and month in (1,2)\")",
        "> ",
        "View(duckdb_parquet)",
        "> ",
        "nyc_query <- function(nyc) {",
        "+ ",
        "  nyc %>% ",
        "+ ",
        "    summarise(",
        "+ ",
        "      sum_fare = sum(fare_amount),",
        "+ ",
        "      avg_fare = mean(fare_amount),",
        "+ ",
        "      count_trips = n(),",
        "+ ",
        "      sum_extra_fare = sum(total_amount-fare_amount),",
        "+ ",
        "      avg_total = mean(total_amount),",
        "+ ",
        "      .by = c(month,vendor_name,payment_type)",
        "+ ",
        "    ) %>% ",
        "+ ",
        "    arrange(month,vendor_name,payment_type)",
        "+ ",
        "}",
        "> ",
        "nyc_query <- mark(",
        "+ ",
        "  min_iterations = 10,",
        "+ ",
        "  dplyr = nyc_query(duckdb_parquet),",
        "+ ",
        "  duckplyr = nyc_query(as_duckplyr_df(duckdb_parquet)),",
        "+ ",
        "  check = FALSE",
        "+ ",
        ")",
        "Error in mark(min_iterations = 10, dplyr = nyc_query(duckdb_parquet),  : \n  could not find function \"mark\"\n",
        "> ",
        "library(bench)",
        "Warning message:\npackage ‘bench’ was built under R version 4.3.3 \n",
        "> ",
        "nyc_query <- mark(",
        "+ ",
        "  min_iterations = 10,",
        "+ ",
        "  dplyr = nyc_query(duckdb_parquet),",
        "+ ",
        "  duckplyr = nyc_query(as_duckplyr_df(duckdb_parquet)),",
        "+ ",
        "  check = FALSE",
        "+ ",
        ")",
        "Error in as_duckplyr_df(duckdb_parquet) : \n  could not find function \"as_duckplyr_df\"\n",
        "> ",
        "library(duckplyr)",
        "\nAttaching package: ‘duckplyr’\n\nThe following objects are masked from ‘package:stats’:\n\n    filter, lag\n\nThe following objects are masked from ‘package:base’:\n\n    intersect, setdiff, setequal, union\n\nWarning message:\npackage ‘duckplyr’ was built under R version 4.3.3 \n",
        "> ",
        "nyc_query <- mark(",
        "+ ",
        "  min_iterations = 10,",
        "+ ",
        "  dplyr = nyc_query(duckdb_parquet),",
        "+ ",
        "  duckplyr = nyc_query(as_duckplyr_df(duckdb_parquet)),",
        "+ ",
        "  check = FALSE",
        "+ ",
        ")",
        "> ",
        "library(ggplot2)",
        "Warning message:\npackage ‘ggplot2’ was built under R version 4.3.3 \n",
        "> ",
        "autoplot(nyc_query)",
        "Loading required namespace: tidyr\n",
        "> ",
        "nyc_query_2 <- bench::mark(",
        "+ ",
        "  min_iterations = 10,",
        "+ ",
        "  dplyr = duckdb_parquet %>% ",
        "+ ",
        "    group_by(month) %>% ",
        "+ ",
        "    summarise(all_trips = n(),",
        "+ ",
        "              shared_trips = sum(passenger_count > 1, na.rm = T),",
        "+ ",
        "              tip_sum = sum(tip_amount, na.rm = TRUE)) %>% ",
        "+ ",
        "    mutate(pct_shared = shared_trips / all_trips * 100),",
        "+ ",
        "  duckplyr = duckdb_parquet %>% ",
        "+ ",
        "    as_duckplyr_df() %>% ",
        "+ ",
        "    summarise(all_trips = n(),",
        "+ ",
        "              shared_trips = sum(passenger_count > 1, na.rm = T),",
        "+ ",
        "              tip_sum = sum(tip_amount, na.rm = TRUE),",
        "+ ",
        "              .by = month) %>% ",
        "+ ",
        "    mutate(pct_shared = shared_trips / all_trips * 100))",
        "\u001B[38;5;232mThe \u001B[34mduckplyr\u001B[38;5;232m package is configured to fall back to \u001B[34mdplyr\u001B[38;5;232m when it encounters an incompatibility.\nFallback events can be collected and uploaded for analysis to guide future development. By\ndefault, no data will be collected or uploaded.\n\u001B[36mℹ\u001B[38;5;232m A fallback situation just occurred. The following information would have been recorded:\n  {\"version\":\"0.3.2\",\"message\":\"Binder Error: No function matches the given name and argument\n  types 'sum(BOOLEAN, BOOLEAN)'.",
        " You might need to add explicit type casts.\\n\\tCandidate\n  functions:\\n\\tsum(DECIMAL) -> DECIMAL\\n\\tsum(SMALLINT) -> HUGEINT\\n\\tsum(INTEGER) ->\n  HUGEINT\\n\\tsum(BIGINT) -> HUGEINT\\n\\tsum(HUGEINT) -> HUGEINT\\n\\tsum(DOUBLE) ->\n  DOUBLE\\n\",\"name\":\"summarise\",\"x\":{\"...1\":\"character\",\"...2\":\"POSIXct/POSIXt\",\"...3\":\"POSIXct/POSIXt\",\"...4\":\"numeric\",\"...5\":\"numeric\",\"...6\":\"numeric\",\"...7\":\"numeric\",\"...8\":\"character\",\"...9\":\"character\",\"...10\":\"numeric\",\"...11\":\"numeric\",\"...12\":\"character\",\"...13\":\"numeric\",\"...",
        "14\":\"numeric\",\"...15\":\"numeric\",\"...16\":\"numeric\",\"...17\":\"numeric\",\"...18\":\"numeric\",\"...19\":\"numeric\",\"...20\":\"numeric\",\"...21\":\"numeric\",\"...22\":\"numeric\",\"...23\":\"numeric\",\"...24\":\"numeric\"},\"args\":{\"dots\":{\"...25\":\"n()\",\"...26\":\"sum(...4\n  > 1, na.rm = ...28)\",\"...27\":\"sum(...16, na.rm = TRUE)\"},\"by\":[\"...23\"]}}\n→ Run \u001B]8;;ide:run:duckplyr::fallback_sitrep()\u0007duckplyr::fallback_sitrep()\u001B]8;;\u0007 to review the current settings.\n→ Run \u001B]8;;ide:run:Sys.setenv(DUCKPLYR_FALLBACK_COLLECT = 1)\u0007Sys.setenv(DUCK",
        "PLYR_FALLBACK_COLLECT = 1)\u001B]8;;\u0007 to enable fallback logging, and\n  \u001B]8;;ide:run:Sys.setenv(DUCKPLYR_FALLBACK_VERBOSE = 1)\u0007Sys.setenv(DUCKPLYR_FALLBACK_VERBOSE = 1)\u001B]8;;\u0007 in addition to enable printing of fallback\n  situations to the console.\n→ Run \u001B]8;;ide:run:duckplyr::fallback_review()\u0007duckplyr::fallback_review()\u001B]8;;\u0007 to review the available reports, and\n  \u001B]8;;ide:run:duckplyr::fallback_upload()\u0007duckplyr::fallback_upload()\u001B]8;;\u0007 to upload them.\n\u001B[36mℹ\u001B[38;5;232m See \u001B]8;;ide:help:duckplyr::fallback\u0007",
        "duckplyr::fallback\u001B]8;;\u0007 for details.\n\u001B[36mℹ\u001B[38;5;232m \u001B[90mThis message will be displayed once every eight hours.\u001B[38;5;232m\u001B[39m\nmaterializing:\n---------------------\n--- Relation Tree ---\n---------------------\nProjection [\"month\" as month, all_trips as all_trips, shared_trips as shared_trips, tip_sum as tip_sum, *(___divide(shared_trips, all_trips), 100.0) as pct_shared]\n  r_dataframe_scan(0x1ec95185598)\n\n---------------------\n-- Result Columns  --\n---------------------\n- month (DOUBLE)\n- all_trips (IN",
        "TEGER)\n- shared_trips (INTEGER)\n- tip_sum (DOUBLE)\n- pct_shared (DOUBLE)\n\n",
        "Error: Each result must equal the first result:\n`dplyr` does not equal `duckplyr`\n",
        "> ",
        "nyc_query_2 <- bench::mark(",
        "+ ",
        "  min_iterations = 10,",
        "+ ",
        "  dplyr = duckdb_parquet %>% ",
        "+ ",
        "    group_by(month) %>% ",
        "+ ",
        "    summarise(all_trips = n(),",
        "+ ",
        "              shared_trips = sum(passenger_count > 1, na.rm = T),",
        "+ ",
        "              tip_sum = sum(tip_amount, na.rm = TRUE)) %>% ",
        "+ ",
        "    mutate(pct_shared = shared_trips / all_trips * 100),",
        "+ ",
        "  duckplyr = duckdb_parquet %>% ",
        "+ ",
        "    as_duckplyr_df() %>% ",
        "+ ",
        "    summarise(all_trips = n(),",
        "+ ",
        "              shared_trips = sum(passenger_count > 1, na.rm = T),",
        "+ ",
        "              tip_sum = sum(tip_amount, na.rm = TRUE),",
        "+ ",
        "              .by = month) %>% ",
        "+ ",
        "    mutate(pct_shared = shared_trips / all_trips * 100),",
        "+ ",
        "  check = FALSE)",
        "> ",
        "autoplot(nyc_query_2)",
        "> ",
        "nyc_query_2 <- bench::mark(",
        "+ ",
        "  min_iterations = 10,",
        "+ ",
        "  dplyr = duckdb_parquet %>% ",
        "+ ",
        "    group_by(month) %>% ",
        "+ ",
        "    summarise(all_trips = n(),",
        "+ ",
        "              sum_fare = sum(fare_amount),",
        "+ ",
        "              avg_fare = mean(fare_amount),",
        "+ ",
        "              count_trips = n(),",
        "+ ",
        "              sum_extra_fare = sum(total_amount-fare_amount),",
        "+ ",
        "              avg_total = mean(total_amount),",
        "+ ",
        "              shared_trips = sum(passenger_count > 1, na.rm = T),",
        "+ ",
        "              tip_sum = sum(tip_amount, na.rm = TRUE)) %>% ",
        "+ ",
        "    mutate(pct_shared = shared_trips / all_trips * 100),",
        "+ ",
        "  duckplyr = duckdb_parquet %>% ",
        "+ ",
        "    as_duckplyr_df() %>% ",
        "+ ",
        "    summarise(all_trips = n(),",
        "+ ",
        "              shared_trips = sum(passenger_count > 1, na.rm = T),",
        "+ ",
        "              sum_fare = sum(fare_amount),",
        "+ ",
        "              avg_fare = mean(fare_amount),",
        "+ ",
        "              count_trips = n(),",
        "+ ",
        "              sum_extra_fare = sum(total_amount-fare_amount),",
        "+ ",
        "              avg_total = mean(total_amount),",
        "+ ",
        "              tip_sum = sum(tip_amount, na.rm = TRUE),",
        "+ ",
        "              .by = month) %>% ",
        "+ ",
        "    mutate(pct_shared = shared_trips / all_trips * 100),",
        "+ ",
        "  check = FALSE)",
        "> ",
        "autoplot(nyc_query_2)",
        "> ",
        "nyc_query <- function(nyc) {",
        "+ ",
        "  nyc %>% ",
        "+ ",
        "    summarise(",
        "+ ",
        "      sum_fare = sum(fare_amount),",
        "+ ",
        "      avg_fare = mean(fare_amount),",
        "+ ",
        "      count_trips = n(),",
        "+ ",
        "      sum_extra_fare = sum(total_amount-fare_amount),",
        "+ ",
        "      avg_total = mean(total_amount),",
        "+ ",
        "      .by = c(month,vendor_name,payment_type)",
        "+ ",
        "    )",
        "+ ",
        "}",
        "> ",
        "nyc_query <- mark(",
        "+ ",
        "  min_iterations = 10,",
        "+ ",
        "  dplyr = nyc_query(duckdb_parquet),",
        "+ ",
        "  duckplyr = nyc_query(as_duckplyr_df(duckdb_parquet)),",
        "+ ",
        "  check = FALSE",
        "+ ",
        ")",
        "> ",
        "autoplot(nyc_query)",
        "> ",
        "nyc_query <- function(nyc) {",
        "+ ",
        "  nyc %>% ",
        "+ ",
        "    summarise(",
        "+ ",
        "      sum_fare = sum(fare_amount),",
        "+ ",
        "      avg_fare = mean(fare_amount),",
        "+ ",
        "      count_trips = n(),",
        "+ ",
        "      sum_extra_fare = sum(total_amount-fare_amount),",
        "+ ",
        "      avg_total = mean(total_amount),",
        "+ ",
        "      .by = c(month)",
        "+ ",
        "    ) %>% ",
        "+ ",
        "    arrange(month)",
        "+ ",
        "}",
        "> ",
        "nyc_query <- mark(",
        "+ ",
        "  min_iterations = 10,",
        "+ ",
        "  dplyr = nyc_query(duckdb_parquet),",
        "+ ",
        "  duckplyr = nyc_query(as_duckplyr_df(duckdb_parquet)),",
        "+ ",
        "  check = FALSE",
        "+ ",
        ")",
        "> ",
        "autoplot(nyc_query)",
        "> ",
        "nyc_query_2 <- bench::mark(",
        "+ ",
        "  min_iterations = 10,",
        "+ ",
        "  dplyr = duckdb_parquet %>% ",
        "+ ",
        "    group_by(month) %>% ",
        "+ ",
        "    summarise(all_trips = n(),",
        "+ ",
        "              sum_fare = sum(fare_amount),",
        "+ ",
        "              avg_fare = mean(fare_amount),",
        "+ ",
        "              count_trips = n(),",
        "+ ",
        "              sum_extra_fare = sum(total_amount-fare_amount),",
        "+ ",
        "              avg_total = mean(total_amount),",
        "+ ",
        "              shared_trips = sum(passenger_count > 1, na.rm = T),",
        "+ ",
        "              tip_sum = sum(tip_amount, na.rm = TRUE)),",
        "+ ",
        "  duckplyr = duckdb_parquet %>% ",
        "+ ",
        "    as_duckplyr_df() %>% ",
        "+ ",
        "    summarise(all_trips = n(),",
        "+ ",
        "              shared_trips = sum(passenger_count > 1, na.rm = T),",
        "+ ",
        "              sum_fare = sum(fare_amount),",
        "+ ",
        "              avg_fare = mean(fare_amount),",
        "+ ",
        "              count_trips = n(),",
        "+ ",
        "              sum_extra_fare = sum(total_amount-fare_amount),",
        "+ ",
        "              avg_total = mean(total_amount),",
        "+ ",
        "              tip_sum = sum(tip_amount, na.rm = TRUE),",
        "+ ",
        "              .by = month),",
        "+ ",
        "  check = FALSE)",
        "> ",
        "autoplot(nyc_query_2)",
        "> ",
        "nyc_query_2 <- bench::mark(",
        "+ ",
        "  min_iterations = 10,",
        "+ ",
        "  dplyr = duckdb_parquet %>% ",
        "+ ",
        "    summarise(all_trips = n(),",
        "+ ",
        "              sum_fare = sum(fare_amount),",
        "+ ",
        "              avg_fare = mean(fare_amount),",
        "+ ",
        "              count_trips = n(),",
        "+ ",
        "              sum_extra_fare = sum(total_amount-fare_amount),",
        "+ ",
        "              avg_total = mean(total_amount),",
        "+ ",
        "              shared_trips = sum(passenger_count > 1, na.rm = T),",
        "+ ",
        "              tip_sum = sum(tip_amount, na.rm = TRUE),",
        "+ ",
        "              .by = month) %>% ",
        "+ ",
        "    mutate(pct_shared = shared_trips / all_trips * 100),",
        "+ ",
        "  duckplyr = duckdb_parquet %>% ",
        "+ ",
        "    as_duckplyr_df() %>% ",
        "+ ",
        "    summarise(all_trips = n(),",
        "+ ",
        "              shared_trips = sum(passenger_count > 1, na.rm = T),",
        "+ ",
        "              sum_fare = sum(fare_amount),",
        "+ ",
        "              avg_fare = mean(fare_amount),",
        "+ ",
        "              count_trips = n(),",
        "+ ",
        "              sum_extra_fare = sum(total_amount-fare_amount),",
        "+ ",
        "              avg_total = mean(total_amount),",
        "+ ",
        "              tip_sum = sum(tip_amount, na.rm = TRUE),",
        "+ ",
        "              .by = month) %>% ",
        "+ ",
        "    mutate(pct_shared = shared_trips / all_trips * 100),",
        "+ ",
        "  check = FALSE)",
        "> ",
        "autoplot(nyc_query_2)",
        "> ",
        "autoplot(nyc_query)",
        "> ",
        "nyc_query_2 <- bench::mark(",
        "+ ",
        "  min_iterations = 10,",
        "+ ",
        "  dplyr = duckdb_parquet %>% ",
        "+ ",
        "    summarise(all_trips = n(),",
        "+ ",
        "              sum_fare = sum(fare_amount),",
        "+ ",
        "              avg_fare = mean(fare_amount),",
        "+ ",
        "              count_trips = n(),",
        "+ ",
        "              sum_extra_fare = sum(total_amount-fare_amount),",
        "+ ",
        "              avg_total = mean(total_amount),",
        "+ ",
        "              shared_trips = sum(passenger_count > 1, na.rm = T),",
        "+ ",
        "              tip_sum = sum(tip_amount, na.rm = TRUE),",
        "+ ",
        "              .by = month),",
        "+ ",
        "  duckplyr = duckdb_parquet %>% ",
        "+ ",
        "    as_duckplyr_df() %>% ",
        "+ ",
        "    summarise(all_trips = n(),",
        "+ ",
        "              shared_trips = sum(passenger_count > 1, na.rm = T),",
        "+ ",
        "              sum_fare = sum(fare_amount),",
        "+ ",
        "              avg_fare = mean(fare_amount),",
        "+ ",
        "              count_trips = n(),",
        "+ ",
        "              sum_extra_fare = sum(total_amount-fare_amount),",
        "+ ",
        "              avg_total = mean(total_amount),",
        "+ ",
        "              tip_sum = sum(tip_amount, na.rm = TRUE),",
        "+ ",
        "              .by = month),",
        "+ ",
        "  check = FALSE)",
        "> ",
        "autoplot(nyc_query_2)",
        "> ",
        "nyc_query_2 <- bench::mark(",
        "+ ",
        "  min_iterations = 10,",
        "+ ",
        "  dplyr = duckdb_parquet %>% ",
        "+ ",
        "    summarise(all_trips = n(),",
        "+ ",
        "              sum_fare = sum(fare_amount),",
        "+ ",
        "              avg_fare = mean(fare_amount),",
        "+ ",
        "              count_trips = n(),",
        "+ ",
        "              sum_extra_fare = sum(total_amount-fare_amount),",
        "+ ",
        "              avg_total = mean(total_amount),",
        "+ ",
        "              shared_trips = sum(passenger_count > 1, na.rm = T),",
        "+ ",
        "              tip_sum = sum(tip_amount, na.rm = TRUE),",
        "+ ",
        "              .by = month),",
        "+ ",
        "  duckplyr = duckdb_parquet %>% ",
        "+ ",
        "    as_duckplyr_df() %>% ",
        "+ ",
        "    summarise(all_trips = n(),",
        "+ ",
        "              shared_trips = sum(passenger_count > 1, na.rm = T),",
        "+ ",
        "              sum_fare = sum(fare_amount),",
        "+ ",
        "              avg_fare = mean(fare_amount),",
        "+ ",
        "              count_trips = n(),",
        "+ ",
        "              sum_extra_fare = sum(total_amount-fare_amount),",
        "+ ",
        "              avg_total = mean(total_amount),",
        "+ ",
        "              tip_sum = sum(tip_amount, na.rm = TRUE),",
        "+ ",
        "              .by = month),",
        "+ ",
        "  check = FALSE)",
        "> ",
        "autoplot(nyc_query_2)",
        "> ",
        "nyc_query_2 <- bench::mark(",
        "+ ",
        "  min_iterations = 10,",
        "+ ",
        "  dplyr = duckdb_parquet %>% ",
        "+ ",
        "    summarise(",
        "+ ",
        "      sum_fare = sum(fare_amount),",
        "+ ",
        "      avg_fare = mean(fare_amount),",
        "+ ",
        "      count_trips = n(),",
        "+ ",
        "      sum_extra_fare = sum(total_amount-fare_amount),",
        "+ ",
        "      avg_total = mean(total_amount),",
        "+ ",
        "      .by = c(month)",
        "+ ",
        "    ) %>% ",
        "+ ",
        "    arrange(month),",
        "+ ",
        "  duckplyr = duckdb_parquet %>% ",
        "+ ",
        "    as_duckplyr_df() %>% ",
        "+ ",
        "    summarise(",
        "+ ",
        "      sum_fare = sum(fare_amount),",
        "+ ",
        "      avg_fare = mean(fare_amount),",
        "+ ",
        "      count_trips = n(),",
        "+ ",
        "      sum_extra_fare = sum(total_amount-fare_amount),",
        "+ ",
        "      avg_total = mean(total_amount),",
        "+ ",
        "      .by = c(month)",
        "+ ",
        "    ) %>% ",
        "+ ",
        "    arrange(month),",
        "+ ",
        "  check = FALSE)",
        "> ",
        "autoplot(nyc_query_2)",
        "> ",
        "nyc_query_2 <- bench::mark(",
        "+ ",
        "  min_iterations = 10,",
        "+ ",
        "  dplyr = duckdb_parquet %>% ",
        "+ ",
        "    summarise(all_trips = n(),",
        "+ ",
        "              sum_fare = sum(fare_amount),",
        "+ ",
        "              avg_fare = mean(fare_amount),",
        "+ ",
        "              count_trips = n(),",
        "+ ",
        "              sum_extra_fare = sum(total_amount-fare_amount),",
        "+ ",
        "              avg_total = mean(total_amount),",
        "+ ",
        "              tip_sum = sum(tip_amount, na.rm = TRUE),",
        "+ ",
        "              .by = month),",
        "+ ",
        "  duckplyr = duckdb_parquet %>% ",
        "+ ",
        "    as_duckplyr_df() %>% ",
        "+ ",
        "    summarise(all_trips = n(),",
        "+ ",
        "              sum_fare = sum(fare_amount),",
        "+ ",
        "              avg_fare = mean(fare_amount),",
        "+ ",
        "              count_trips = n(),",
        "+ ",
        "              sum_extra_fare = sum(total_amount-fare_amount),",
        "+ ",
        "              avg_total = mean(total_amount),",
        "+ ",
        "              tip_sum = sum(tip_amount, na.rm = TRUE),",
        "+ ",
        "              .by = month),",
        "+ ",
        "  check = FALSE)",
        "> ",
        "autoplot(nyc_query_2)",
        "> ",
        "nyc_query_2 <- bench::mark(",
        "+ ",
        "  min_iterations = 10,",
        "+ ",
        "  dplyr = duckdb_parquet %>% ",
        "+ ",
        "    summarise(all_trips = n(),",
        "+ ",
        "              sum_fare = sum(fare_amount),",
        "+ ",
        "              avg_fare = mean(fare_amount),",
        "+ ",
        "              count_trips = n(),",
        "+ ",
        "              sum_extra_fare = sum(total_amount-fare_amount),",
        "+ ",
        "              avg_total = mean(total_amount),",
        "+ ",
        "              tip_sum = sum(tip_amount),",
        "+ ",
        "              .by = month),",
        "+ ",
        "  duckplyr = duckdb_parquet %>% ",
        "+ ",
        "    as_duckplyr_df() %>% ",
        "+ ",
        "    summarise(all_trips = n(),",
        "+ ",
        "              sum_fare = sum(fare_amount),",
        "+ ",
        "              avg_fare = mean(fare_amount),",
        "+ ",
        "              count_trips = n(),",
        "+ ",
        "              sum_extra_fare = sum(total_amount-fare_amount),",
        "+ ",
        "              avg_total = mean(total_amount),",
        "+ ",
        "              tip_sum = sum(tip_amount),",
        "+ ",
        "              .by = month),",
        "+ ",
        "  check = FALSE)",
        "> ",
        "autoplot(nyc_query_2)",
        "> ",
        "tpch_01 <- function(lineitem) {",
        "+ ",
        "  lineitem |>",
        "+ ",
        "    filter(l_shipdate <= !!as.Date(\"1998-09-02\")) |>",
        "+ ",
        "    summarise(",
        "+ ",
        "      sum_qty = sum(l_quantity),",
        "+ ",
        "      sum_base_price = sum(l_extendedprice, na.rm = TRUE),",
        "+ ",
        "      sum_disc_price = sum(l_extendedprice * (1 - l_discount)),",
        "+ ",
        "      sum_charge = sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)),",
        "+ ",
        "      avg_qty = mean(l_quantity),",
        "+ ",
        "      avg_price = mean(l_extendedprice),",
        "+ ",
        "      avg_disc = mean(l_discount),",
        "+ ",
        "      count_order = n(),",
        "+ ",
        "      .by = c(l_returnflag, l_linestatus)",
        "+ ",
        "    ) |>",
        "+ ",
        "    arrange(l_returnflag, l_linestatus)",
        "+ ",
        "}",
        "> ",
        "lineitem <- as_tibble(duckdb:::sql(\"INSTALL tpch; LOAD tpch; CALL dbgen(sf=2); FROM lineitem;\"))",
        "> ",
        "tpch_01 <- function(lineitem) {",
        "+ ",
        "  lineitem |>",
        "+ ",
        "    filter(l_shipdate <= !!as.Date(\"1998-09-02\")) |>",
        "+ ",
        "    summarise(",
        "+ ",
        "      sum_qty = sum(l_quantity),",
        "+ ",
        "      sum_base_price = sum(l_extendedprice, na.rm = TRUE),",
        "+ ",
        "      sum_disc_price = sum(l_extendedprice * (1 - l_discount)),",
        "+ ",
        "      sum_charge = sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)),",
        "+ ",
        "      avg_qty = mean(l_quantity),",
        "+ ",
        "      avg_price = mean(l_extendedprice),",
        "+ ",
        "      avg_disc = mean(l_discount),",
        "+ ",
        "      count_order = n(),",
        "+ ",
        "      .by = c(l_returnflag, l_linestatus)",
        "+ ",
        "    ) |>",
        "+ ",
        "    arrange(l_returnflag, l_linestatus)",
        "+ ",
        "}",
        "> ",
        "tpch_query_1 <- mark(",
        "+ ",
        "  min_iterations = 10,",
        "+ ",
        "  dplyr = tpch_01(lineitem),",
        "+ ",
        "  duckplyr = tpch_01(as_duckplyr_df(lineitem)),",
        "+ ",
        "  duckdb = tbl(con, \"lineitem\") %>% tpch_01(), ",
        "+ ",
        "  check = FALSE",
        "+ ",
        ")",
        "materializing:\n---------------------\n--- Relation Tree ---\n---------------------\nFilter [<=(l_shipdate, '1998-09-02'::DATE)]\n  r_dataframe_scan(0x1ed4b22d468)\n\n---------------------\n-- Result Columns  --\n---------------------\n- l_orderkey (INTEGER)\n- l_partkey (INTEGER)\n- l_suppkey (INTEGER)\n- l_linenumber (INTEGER)\n- l_quantity (DOUBLE)\n- l_extendedprice (DOUBLE)\n- l_discount (DOUBLE)\n- l_tax (DOUBLE)\n- l_returnflag (VARCHAR)\n- l_linestatus (VARCHAR)\n- l_shipdate (DATE)\n- l_commitdate (DATE)\n- l_receiptdat",
        "e (DATE)\n- l_shipinstruct (VARCHAR)\n- l_shipmode (VARCHAR)\n- l_comment (VARCHAR)\n\n\u001B[38;5;232m\u001B[36mℹ\u001B[38;5;232m Using `ident_q()` for a table identifier is intended as fallback in case of bugs.\n\u001B[36mℹ\u001B[38;5;232m If you need it to work around a bug please open an issue\n  \u001B[3m\u001B[34m<\u001B]8;;https://github.com/tidyverse/dbplyr/issues\u0007https://github.com/tidyverse/dbplyr/issues\u001B]8;;\u0007>\u001B[38;5;232m\u001B[23m.\u001B[39m\n\u001B[90mThis message is displayed once every 8 hours.\u001B[39m\n\u001B[1m\u001B[33mError\u001B[39m in `db_query_fields.DBIConnectio",
        "n()`:\u001B[22m\n\u001B[38;5;232m\u001B[33m!\u001B[38;5;232m Can't query fields.\u001B[39m\n\u001B[1mCaused by error:\u001B[22m\n\u001B[33m!\u001B[39m rapi_prepare: Failed to prepare query SELECT *\nFROM lineitem q01\nWHERE (0 = 1)\nError: Catalog Error: Table with name lineitem does not exist!\nDid you mean \"pg_index\"?\nLINE 2: FROM lineitem q01\n             ^\n\u001B[90mRun `\u001B]8;;rstudio:run:rlang::last_trace()\u0007rlang::last_trace()\u001B]8;;\u0007` to see where the error occurred.\u001B[39m\n",
        "> ",
        "duckdb_register(con, name = \"lineitem\", df = lineitem)",
        "> ",
        "tpch_query_1 <- mark(",
        "+ ",
        "  min_iterations = 10,",
        "+ ",
        "  dplyr = tpch_01(lineitem),",
        "+ ",
        "  duckplyr = tpch_01(as_duckplyr_df(lineitem)),",
        "+ ",
        "  duckdb = tbl(con, \"lineitem\") %>% tpch_01(), ",
        "+ ",
        "  check = FALSE",
        "+ ",
        ")",
        "materializing:\n---------------------\n--- Relation Tree ---\n---------------------\nFilter [<=(l_shipdate, '1998-09-02'::DATE)]\n  r_dataframe_scan(0x1eec50fd4b8)\n\n---------------------\n-- Result Columns  --\n---------------------\n- l_orderkey (INTEGER)\n- l_partkey (INTEGER)\n- l_suppkey (INTEGER)\n- l_linenumber (INTEGER)\n- l_quantity (DOUBLE)\n- l_extendedprice (DOUBLE)\n- l_discount (DOUBLE)\n- l_tax (DOUBLE)\n- l_returnflag (VARCHAR)\n- l_linestatus (VARCHAR)\n- l_shipdate (DATE)\n- l_commitdate (DATE)\n- l_receiptdat",
        "e (DATE)\n- l_shipinstruct (VARCHAR)\n- l_shipmode (VARCHAR)\n- l_comment (VARCHAR)\n\nmaterializing:\n---------------------\n--- Relation Tree ---\n---------------------\nFilter [<=(l_shipdate, '1998-09-02'::DATE)]\n  r_dataframe_scan(0x1eea1b67ba8)\n\n---------------------\n-- Result Columns  --\n---------------------\n- l_orderkey (INTEGER)\n- l_partkey (INTEGER)\n- l_suppkey (INTEGER)\n- l_linenumber (INTEGER)\n- l_quantity (DOUBLE)\n- l_extendedprice (DOUBLE)\n- l_discount (DOUBLE)\n- l_tax (DOUBLE)\n- l_returnflag (VARCHAR)",
        "\n- l_linestatus (VARCHAR)\n- l_shipdate (DATE)\n- l_commitdate (DATE)\n- l_receiptdate (DATE)\n- l_shipinstruct (VARCHAR)\n- l_shipmode (VARCHAR)\n- l_comment (VARCHAR)\n\nmaterializing:\n---------------------\n--- Relation Tree ---\n---------------------\nFilter [<=(l_shipdate, '1998-09-02'::DATE)]\n  r_dataframe_scan(0x1eea223cce8)\n\n---------------------\n-- Result Columns  --\n---------------------\n- l_orderkey (INTEGER)\n- l_partkey (INTEGER)\n- l_suppkey (INTEGER)\n- l_linenumber (INTEGER)\n- l_quantity (DOUBLE)\n- l_exte",
        "ndedprice (DOUBLE)\n- l_discount (DOUBLE)\n- l_tax (DOUBLE)\n- l_returnflag (VARCHAR)\n- l_linestatus (VARCHAR)\n- l_shipdate (DATE)\n- l_commitdate (DATE)\n- l_receiptdate (DATE)\n- l_shipinstruct (VARCHAR)\n- l_shipmode (VARCHAR)\n- l_comment (VARCHAR)\n\nmaterializing:\n---------------------\n--- Relation Tree ---\n---------------------\nFilter [<=(l_shipdate, '1998-09-02'::DATE)]\n  r_dataframe_scan(0x1eea1b67578)\n\n---------------------\n-- Result Columns  --\n---------------------\n- l_orderkey (INTEGER)\n- l_partkey (INTE",
        "GER)\n- l_suppkey (INTEGER)\n- l_linenumber (INTEGER)\n- l_quantity (DOUBLE)\n- l_extendedprice (DOUBLE)\n- l_discount (DOUBLE)\n- l_tax (DOUBLE)\n- l_returnflag (VARCHAR)\n- l_linestatus (VARCHAR)\n- l_shipdate (DATE)\n- l_commitdate (DATE)\n- l_receiptdate (DATE)\n- l_shipinstruct (VARCHAR)\n- l_shipmode (VARCHAR)\n- l_comment (VARCHAR)\n\nmaterializing:\n---------------------\n--- Relation Tree ---\n---------------------\nFilter [<=(l_shipdate, '1998-09-02'::DATE)]\n  r_dataframe_scan(0x1eea176de78)\n\n---------------------\n--",
        " Result Columns  --\n---------------------\n- l_orderkey (INTEGER)\n- l_partkey (INTEGER)\n- l_suppkey (INTEGER)\n- l_linenumber (INTEGER)\n- l_quantity (DOUBLE)\n- l_extendedprice (DOUBLE)\n- l_discount (DOUBLE)\n- l_tax (DOUBLE)\n- l_returnflag (VARCHAR)\n- l_linestatus (VARCHAR)\n- l_shipdate (DATE)\n- l_commitdate (DATE)\n- l_receiptdate (DATE)\n- l_shipinstruct (VARCHAR)\n- l_shipmode (VARCHAR)\n- l_comment (VARCHAR)\n\nmaterializing:\n---------------------\n--- Relation Tree ---\n---------------------\nFilter [<=(l_shipdate",
        ", '1998-09-02'::DATE)]\n  r_dataframe_scan(0x1eea223d738)\n\n---------------------\n-- Result Columns  --\n---------------------\n- l_orderkey (INTEGER)\n- l_partkey (INTEGER)\n- l_suppkey (INTEGER)\n- l_linenumber (INTEGER)\n- l_quantity (DOUBLE)\n- l_extendedprice (DOUBLE)\n- l_discount (DOUBLE)\n- l_tax (DOUBLE)\n- l_returnflag (VARCHAR)\n- l_linestatus (VARCHAR)\n- l_shipdate (DATE)\n- l_commitdate (DATE)\n- l_receiptdate (DATE)\n- l_shipinstruct (VARCHAR)\n- l_shipmode (VARCHAR)\n- l_comment (VARCHAR)\n\nmaterializing:\n-----",
        "----------------\n--- Relation Tree ---\n---------------------\nFilter [<=(l_shipdate, '1998-09-02'::DATE)]\n  r_dataframe_scan(0x1eea223cb88)\n\n---------------------\n-- Result Columns  --\n---------------------\n- l_orderkey (INTEGER)\n- l_partkey (INTEGER)\n- l_suppkey (INTEGER)\n- l_linenumber (INTEGER)\n- l_quantity (DOUBLE)\n- l_extendedprice (DOUBLE)\n- l_discount (DOUBLE)\n- l_tax (DOUBLE)\n- l_returnflag (VARCHAR)\n- l_linestatus (VARCHAR)\n- l_shipdate (DATE)\n- l_commitdate (DATE)\n- l_receiptdate (DATE)\n- l_shipins",
        "truct (VARCHAR)\n- l_shipmode (VARCHAR)\n- l_comment (VARCHAR)\n\nmaterializing:\n---------------------\n--- Relation Tree ---\n---------------------\nFilter [<=(l_shipdate, '1998-09-02'::DATE)]\n  r_dataframe_scan(0x1eea1b676d8)\n\n---------------------\n-- Result Columns  --\n---------------------\n- l_orderkey (INTEGER)\n- l_partkey (INTEGER)\n- l_suppkey (INTEGER)\n- l_linenumber (INTEGER)\n- l_quantity (DOUBLE)\n- l_extendedprice (DOUBLE)\n- l_discount (DOUBLE)\n- l_tax (DOUBLE)\n- l_returnflag (VARCHAR)\n- l_linestatus (VAR",
        "CHAR)\n- l_shipdate (DATE)\n- l_commitdate (DATE)\n- l_receiptdate (DATE)\n- l_shipinstruct (VARCHAR)\n- l_shipmode (VARCHAR)\n- l_comment (VARCHAR)\n\nmaterializing:\n---------------------\n--- Relation Tree ---\n---------------------\nFilter [<=(l_shipdate, '1998-09-02'::DATE)]\n  r_dataframe_scan(0x1eea223d898)\n\n---------------------\n-- Result Columns  --\n---------------------\n- l_orderkey (INTEGER)\n- l_partkey (INTEGER)\n- l_suppkey (INTEGER)\n- l_linenumber (INTEGER)\n- l_quantity (DOUBLE)\n- l_extendedprice (DOUBLE)\n-",
        " l_discount (DOUBLE)\n- l_tax (DOUBLE)\n- l_returnflag (VARCHAR)\n- l_linestatus (VARCHAR)\n- l_shipdate (DATE)\n- l_commitdate (DATE)\n- l_receiptdate (DATE)\n- l_shipinstruct (VARCHAR)\n- l_shipmode (VARCHAR)\n- l_comment (VARCHAR)\n\nmaterializing:\n---------------------\n--- Relation Tree ---\n---------------------\nFilter [<=(l_shipdate, '1998-09-02'::DATE)]\n  r_dataframe_scan(0x1eea1f6ff08)\n\n---------------------\n-- Result Columns  --\n---------------------\n- l_orderkey (INTEGER)\n- l_partkey (INTEGER)\n- l_suppkey (IN",
        "TEGER)\n- l_linenumber (INTEGER)\n- l_quantity (DOUBLE)\n- l_extendedprice (DOUBLE)\n- l_discount (DOUBLE)\n- l_tax (DOUBLE)\n- l_returnflag (VARCHAR)\n- l_linestatus (VARCHAR)\n- l_shipdate (DATE)\n- l_commitdate (DATE)\n- l_receiptdate (DATE)\n- l_shipinstruct (VARCHAR)\n- l_shipmode (VARCHAR)\n- l_comment (VARCHAR)\n\nmaterializing:\n---------------------\n--- Relation Tree ---\n---------------------\nFilter [<=(l_shipdate, '1998-09-02'::DATE)]\n  r_dataframe_scan(0x1eea1932448)\n\n---------------------\n-- Result Columns  --\n",
        "---------------------\n- l_orderkey (INTEGER)\n- l_partkey (INTEGER)\n- l_suppkey (INTEGER)\n- l_linenumber (INTEGER)\n- l_quantity (DOUBLE)\n- l_extendedprice (DOUBLE)\n- l_discount (DOUBLE)\n- l_tax (DOUBLE)\n- l_returnflag (VARCHAR)\n- l_linestatus (VARCHAR)\n- l_shipdate (DATE)\n- l_commitdate (DATE)\n- l_receiptdate (DATE)\n- l_shipinstruct (VARCHAR)\n- l_shipmode (VARCHAR)\n- l_comment (VARCHAR)\n\n",
        "> ",
        "autoplot(tpch_query_1\\)",
        "Error: unexpected '\\\\' in \"autoplot(tpch_query_1\\\"\n",
        "> ",
        "autoplot(tpch_query_1)",
        "> ",
        "tpch_query_1",
        "\u001B[38;5;246m# A tibble: 3 × 13\u001B[39m\n  expression     min   median `itr/sec` mem_alloc `gc/sec` n_itr  n_gc total_time result memory     time       gc      \n  \u001B[3m\u001B[38;5;246m<bch:expr>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<bch:t>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<bch:tm>\u001B[39m\u001B[23m     \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<bch:byt>\u001B[39m\u001B[23m    \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<int>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m   \u001B[3m\u001B[38;5;246m<bch:tm>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<list>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<l",
        "ist>\u001B[39m\u001B[23m     \u001B[3m\u001B[38;5;246m<list>\u001B[39m\u001B[23m     \u001B[3m\u001B[38;5;246m<list>\u001B[39m\u001B[23m  \n\u001B[38;5;250m1\u001B[39m dplyr        2.04s    2.25s     0.456    2.33GB    1.37      3     9      6.59s \u001B[38;5;246m<NULL>\u001B[39m \u001B[38;5;246m<Rprofmem>\u001B[39m \u001B[38;5;246m<bench_tm>\u001B[39m \u001B[38;5;246m<tibble>\u001B[39m\n\u001B[38;5;250m2\u001B[39m duckplyr     6.01s    6.35s     0.149    1.67GB    0.224     4     6      26.8s \u001B[38;5;246m<NULL>\u001B[39m \u001B[38;5;246m<Rprofmem>\u001B[39m \u001B[38;5;246m<bench_tm>\u001B[39m \u001B[38;5;246m<tibble>\u001B[39m\n\u001B[38;5;250m3\u001B[39m duckd",
        "b     389.2ms 463.16ms     1.53      6.2MB    0.383     8     2      5.22s \u001B[38;5;246m<NULL>\u001B[39m \u001B[38;5;246m<Rprofmem>\u001B[39m \u001B[38;5;246m<bench_tm>\u001B[39m \u001B[38;5;246m<tibble>\u001B[39m\n",
        "> ",
        "tpch_query_1$median[[1]]",
        "[1] 2.25s\n",
        "> ",
        "?as_duckplyr_df",
        "> ",
        "tpch_01_na <- function(lineitem) {",
        "+ ",
        "  lineitem |>",
        "+ ",
        "    select(l_shipdate, l_returnflag, l_linestatus, l_quantity, l_extendedprice, l_discount, l_tax) |>",
        "+ ",
        "    filter(l_shipdate <= !!as.Date(\"1998-09-02\")) |>",
        "+ ",
        "    select(l_returnflag, l_linestatus, l_quantity, l_extendedprice, l_discount, l_tax) |>",
        "+ ",
        "    summarise(",
        "+ ",
        "      sum_qty = sum(l_quantity, na.rm = TRUE),",
        "+ ",
        "      sum_base_price = sum(l_extendedprice),",
        "+ ",
        "      sum_disc_price = sum(l_extendedprice * (1 - l_discount)),",
        "+ ",
        "      sum_charge = sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)),",
        "+ ",
        "      avg_qty = mean(l_quantity),",
        "+ ",
        "      avg_price = mean(l_extendedprice),",
        "+ ",
        "      avg_disc = mean(l_discount),",
        "+ ",
        "      count_order = n(),",
        "+ ",
        "      .by = c(l_returnflag, l_linestatus)",
        "+ ",
        "    ) |>",
        "+ ",
        "    arrange(l_returnflag, l_linestatus)",
        "+ ",
        "}",
        "> ",
        "tpch_01_na(as_duckplyr_df(lineitem))",
        "materializing:\n---------------------\n--- Relation Tree ---\n---------------------\nProjection [l_returnflag as l_returnflag, l_linestatus as l_linestatus, l_quantity as l_quantity, l_extendedprice as l_extendedprice, l_discount as l_discount, l_tax as l_tax]\n  Filter [<=(l_shipdate, '1998-09-02'::DATE)]\n    Projection [l_shipdate as l_shipdate, l_returnflag as l_returnflag, l_linestatus as l_linestatus, l_quantity as l_quantity, l_extendedprice as l_extendedprice, l_discount as l_discount, l_tax as l_tax]\n   ",
        "   r_dataframe_scan(0x1ec143d4138)\n\n---------------------\n-- Result Columns  --\n---------------------\n- l_returnflag (VARCHAR)\n- l_linestatus (VARCHAR)\n- l_quantity (DOUBLE)\n- l_extendedprice (DOUBLE)\n- l_discount (DOUBLE)\n- l_tax (DOUBLE)\n\nmaterializing:\n---------------------\n--- Relation Tree ---\n---------------------\nOrder [l_returnflag ASC, l_linestatus ASC]\n  r_dataframe_scan(0x1ec141aa5f8)\n\n---------------------\n-- Result Columns  --\n---------------------\n- l_returnflag (VARCHAR)\n- l_linestatus (VARCH",
        "AR)\n- sum_qty (DOUBLE)\n- sum_base_price (DOUBLE)\n- sum_disc_price (DOUBLE)\n- sum_charge (DOUBLE)\n- avg_qty (DOUBLE)\n- avg_price (DOUBLE)\n- avg_disc (DOUBLE)\n- count_order (INTEGER)\n\n\u001B[38;5;246m# A tibble: 4 × 10\u001B[39m\n  l_returnflag l_linestatus   sum_qty sum_base_price sum_disc_price   sum_charge avg_qty avg_price avg_disc count_order\n  \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m        \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m            \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m          \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m          \u001B[3m\u001B[38;5;2",
        "46m<dbl>\u001B[39m\u001B[23m        \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m   \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m     \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m    \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m       \u001B[3m\u001B[38;5;246m<int>\u001B[39m\u001B[23m\n\u001B[38;5;250m1\u001B[39m A            F             75\u001B[4m4\u001B[24m\u001B[4m7\u001B[24m\u001B[4m8\u001B[24m173  \u001B[4m1\u001B[24m\u001B[4m1\u001B[24m\u001B[4m3\u001B[24m197\u001B[4m3\u001B[24m\u001B[4m3\u001B[24m\u001B[4m1\u001B[24m346.  \u001B[4m1\u001B[24m\u001B[4m0\u001B[24m\u001B[4m7\u001B[24m536\u001B[4m4\u001B[24m\u001B[4m0\u001B[24m\u001B[4m8\u001B[24m207.      1.12\u001B[38;5;246me\u001B[39m11    25.5    \u001B[4m3\u001B[24m\u001B[4m8\u001B[24m252.   0.050\u001B[4m0\u001B[24m     2\u001B[4m9\u001B[24",
        "m\u001B[4m5\u001B[24m\u001B[4m9\u001B[24m267\n\u001B[38;5;250m2\u001B[39m N            F              1\u001B[4m9\u001B[24m\u001B[4m6\u001B[24m\u001B[4m6\u001B[24m480    \u001B[4m2\u001B[24m946\u001B[4m1\u001B[24m\u001B[4m1\u001B[24m\u001B[4m4\u001B[24m827.    \u001B[4m2\u001B[24m798\u001B[4m7\u001B[24m\u001B[4m9\u001B[24m\u001B[4m6\u001B[24m636.      2.91\u001B[38;5;246me\u001B[39m 9    25.5    \u001B[4m3\u001B[24m\u001B[4m8\u001B[24m248.   0.050\u001B[4m0\u001B[24m       \u001B[4m7\u001B[24m\u001B[4m7\u001B[24m026\n\u001B[38;5;250m3\u001B[39m N            O            148\u001B[4m6\u001B[24m\u001B[4m4\u001B[24m\u001B[4m2\u001B[24m120  \u001B[4m2\u001B[24m\u001B[4m2\u001B[24m\u001B[4m2\u001B[24m903\u001B[4m5\u001B[24m\u001B[4m6\u001B[24m\u001B[4m2\u001B[24m619.  \u001B[4m2\u001B[24m\u001B[4m1\u001B[24m\u001B[4m1\u001B[24m762\u001B[4m3\u001B[",
        "24m\u001B[4m1\u001B[24m\u001B[4m8\u001B[24m146.      2.20\u001B[38;5;246me\u001B[39m11    25.5    \u001B[4m3\u001B[24m\u001B[4m8\u001B[24m233.   0.050\u001B[4m0\u001B[24m     5\u001B[4m8\u001B[24m\u001B[4m3\u001B[24m\u001B[4m0\u001B[24m202\n\u001B[38;5;250m4\u001B[39m R            F             75\u001B[4m5\u001B[24m\u001B[4m7\u001B[24m\u001B[4m7\u001B[24m628  \u001B[4m1\u001B[24m\u001B[4m1\u001B[24m\u001B[4m3\u001B[24m351\u001B[4m9\u001B[24m\u001B[4m1\u001B[24m\u001B[4m4\u001B[24m218.  \u001B[4m1\u001B[24m\u001B[4m0\u001B[24m\u001B[4m7\u001B[24m688\u001B[4m0\u001B[24m\u001B[4m8\u001B[24m\u001B[4m1\u001B[24m811.      1.12\u001B[38;5;246me\u001B[39m11    25.5    \u001B[4m3\u001B[24m\u001B[4m8\u001B[24m263.   0.050\u001B[4m0\u001B[24m     2\u001B[4m9\u001B[24m\u001B[4m6\u001B[24m\u001B[4m2\u001B[24m417\n",
        "> ",
        "tpch_01_na(suppressWarnings(as_duckplyr_df(lineitem)))",
        "materializing:\n---------------------\n--- Relation Tree ---\n---------------------\nProjection [l_returnflag as l_returnflag, l_linestatus as l_linestatus, l_quantity as l_quantity, l_extendedprice as l_extendedprice, l_discount as l_discount, l_tax as l_tax]\n  Filter [<=(l_shipdate, '1998-09-02'::DATE)]\n    Projection [l_shipdate as l_shipdate, l_returnflag as l_returnflag, l_linestatus as l_linestatus, l_quantity as l_quantity, l_extendedprice as l_extendedprice, l_discount as l_discount, l_tax as l_tax]\n   ",
        "   r_dataframe_scan(0x1ec08eb1958)\n\n---------------------\n-- Result Columns  --\n---------------------\n- l_returnflag (VARCHAR)\n- l_linestatus (VARCHAR)\n- l_quantity (DOUBLE)\n- l_extendedprice (DOUBLE)\n- l_discount (DOUBLE)\n- l_tax (DOUBLE)\n\nmaterializing:\n---------------------\n--- Relation Tree ---\n---------------------\nOrder [l_returnflag ASC, l_linestatus ASC]\n  r_dataframe_scan(0x1ec14930928)\n\n---------------------\n-- Result Columns  --\n---------------------\n- l_returnflag (VARCHAR)\n- l_linestatus (VARCH",
        "AR)\n- sum_qty (DOUBLE)\n- sum_base_price (DOUBLE)\n- sum_disc_price (DOUBLE)\n- sum_charge (DOUBLE)\n- avg_qty (DOUBLE)\n- avg_price (DOUBLE)\n- avg_disc (DOUBLE)\n- count_order (INTEGER)\n\n\u001B[38;5;246m# A tibble: 4 × 10\u001B[39m\n  l_returnflag l_linestatus   sum_qty sum_base_price sum_disc_price   sum_charge avg_qty avg_price avg_disc count_order\n  \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m        \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m            \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m          \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m          \u001B[3m\u001B[38;5;2",
        "46m<dbl>\u001B[39m\u001B[23m        \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m   \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m     \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m    \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m       \u001B[3m\u001B[38;5;246m<int>\u001B[39m\u001B[23m\n\u001B[38;5;250m1\u001B[39m A            F             75\u001B[4m4\u001B[24m\u001B[4m7\u001B[24m\u001B[4m8\u001B[24m173  \u001B[4m1\u001B[24m\u001B[4m1\u001B[24m\u001B[4m3\u001B[24m197\u001B[4m3\u001B[24m\u001B[4m3\u001B[24m\u001B[4m1\u001B[24m346.  \u001B[4m1\u001B[24m\u001B[4m0\u001B[24m\u001B[4m7\u001B[24m536\u001B[4m4\u001B[24m\u001B[4m0\u001B[24m\u001B[4m8\u001B[24m207.      1.12\u001B[38;5;246me\u001B[39m11    25.5    \u001B[4m3\u001B[24m\u001B[4m8\u001B[24m252.   0.050\u001B[4m0\u001B[24m     2\u001B[4m9\u001B[24",
        "m\u001B[4m5\u001B[24m\u001B[4m9\u001B[24m267\n\u001B[38;5;250m2\u001B[39m N            F              1\u001B[4m9\u001B[24m\u001B[4m6\u001B[24m\u001B[4m6\u001B[24m480    \u001B[4m2\u001B[24m946\u001B[4m1\u001B[24m\u001B[4m1\u001B[24m\u001B[4m4\u001B[24m827.    \u001B[4m2\u001B[24m798\u001B[4m7\u001B[24m\u001B[4m9\u001B[24m\u001B[4m6\u001B[24m636.      2.91\u001B[38;5;246me\u001B[39m 9    25.5    \u001B[4m3\u001B[24m\u001B[4m8\u001B[24m248.   0.050\u001B[4m0\u001B[24m       \u001B[4m7\u001B[24m\u001B[4m7\u001B[24m026\n\u001B[38;5;250m3\u001B[39m N            O            148\u001B[4m6\u001B[24m\u001B[4m4\u001B[24m\u001B[4m2\u001B[24m120  \u001B[4m2\u001B[24m\u001B[4m2\u001B[24m\u001B[4m2\u001B[24m903\u001B[4m5\u001B[24m\u001B[4m6\u001B[24m\u001B[4m2\u001B[24m619.  \u001B[4m2\u001B[24m\u001B[4m1\u001B[24m\u001B[4m1\u001B[24m762\u001B[4m3\u001B[",
        "24m\u001B[4m1\u001B[24m\u001B[4m8\u001B[24m146.      2.20\u001B[38;5;246me\u001B[39m11    25.5    \u001B[4m3\u001B[24m\u001B[4m8\u001B[24m233.   0.050\u001B[4m0\u001B[24m     5\u001B[4m8\u001B[24m\u001B[4m3\u001B[24m\u001B[4m0\u001B[24m202\n\u001B[38;5;250m4\u001B[39m R            F             75\u001B[4m5\u001B[24m\u001B[4m7\u001B[24m\u001B[4m7\u001B[24m628  \u001B[4m1\u001B[24m\u001B[4m1\u001B[24m\u001B[4m3\u001B[24m351\u001B[4m9\u001B[24m\u001B[4m1\u001B[24m\u001B[4m4\u001B[24m218.  \u001B[4m1\u001B[24m\u001B[4m0\u001B[24m\u001B[4m7\u001B[24m688\u001B[4m0\u001B[24m\u001B[4m8\u001B[24m\u001B[4m1\u001B[24m811.      1.12\u001B[38;5;246me\u001B[39m11    25.5    \u001B[4m3\u001B[24m\u001B[4m8\u001B[24m263.   0.050\u001B[4m0\u001B[24m     2\u001B[4m9\u001B[24m\u001B[4m6\u001B[24m\u001B[4m2\u001B[24m417\n",
        "> ",
        "tpch_01_na(invisible(as_duckplyr_df(lineitem)))",
        "materializing:\n---------------------\n--- Relation Tree ---\n---------------------\nProjection [l_returnflag as l_returnflag, l_linestatus as l_linestatus, l_quantity as l_quantity, l_extendedprice as l_extendedprice, l_discount as l_discount, l_tax as l_tax]\n  Filter [<=(l_shipdate, '1998-09-02'::DATE)]\n    Projection [l_shipdate as l_shipdate, l_returnflag as l_returnflag, l_linestatus as l_linestatus, l_quantity as l_quantity, l_extendedprice as l_extendedprice, l_discount as l_discount, l_tax as l_tax]\n   ",
        "   r_dataframe_scan(0x1ec14935918)\n\n---------------------\n-- Result Columns  --\n---------------------\n- l_returnflag (VARCHAR)\n- l_linestatus (VARCHAR)\n- l_quantity (DOUBLE)\n- l_extendedprice (DOUBLE)\n- l_discount (DOUBLE)\n- l_tax (DOUBLE)\n\nmaterializing:\n---------------------\n--- Relation Tree ---\n---------------------\nOrder [l_returnflag ASC, l_linestatus ASC]\n  r_dataframe_scan(0x1ec149122b8)\n\n---------------------\n-- Result Columns  --\n---------------------\n- l_returnflag (VARCHAR)\n- l_linestatus (VARCH",
        "AR)\n- sum_qty (DOUBLE)\n- sum_base_price (DOUBLE)\n- sum_disc_price (DOUBLE)\n- sum_charge (DOUBLE)\n- avg_qty (DOUBLE)\n- avg_price (DOUBLE)\n- avg_disc (DOUBLE)\n- count_order (INTEGER)\n\n\u001B[38;5;246m# A tibble: 4 × 10\u001B[39m\n  l_returnflag l_linestatus   sum_qty sum_base_price sum_disc_price   sum_charge avg_qty avg_price avg_disc count_order\n  \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m        \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m            \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m          \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m          \u001B[3m\u001B[38;5;2",
        "46m<dbl>\u001B[39m\u001B[23m        \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m   \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m     \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m    \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m       \u001B[3m\u001B[38;5;246m<int>\u001B[39m\u001B[23m\n\u001B[38;5;250m1\u001B[39m A            F             75\u001B[4m4\u001B[24m\u001B[4m7\u001B[24m\u001B[4m8\u001B[24m173  \u001B[4m1\u001B[24m\u001B[4m1\u001B[24m\u001B[4m3\u001B[24m197\u001B[4m3\u001B[24m\u001B[4m3\u001B[24m\u001B[4m1\u001B[24m346.  \u001B[4m1\u001B[24m\u001B[4m0\u001B[24m\u001B[4m7\u001B[24m536\u001B[4m4\u001B[24m\u001B[4m0\u001B[24m\u001B[4m8\u001B[24m207.      1.12\u001B[38;5;246me\u001B[39m11    25.5    \u001B[4m3\u001B[24m\u001B[4m8\u001B[24m252.   0.050\u001B[4m0\u001B[24m     2\u001B[4m9\u001B[24",
        "m\u001B[4m5\u001B[24m\u001B[4m9\u001B[24m267\n\u001B[38;5;250m2\u001B[39m N            F              1\u001B[4m9\u001B[24m\u001B[4m6\u001B[24m\u001B[4m6\u001B[24m480    \u001B[4m2\u001B[24m946\u001B[4m1\u001B[24m\u001B[4m1\u001B[24m\u001B[4m4\u001B[24m827.    \u001B[4m2\u001B[24m798\u001B[4m7\u001B[24m\u001B[4m9\u001B[24m\u001B[4m6\u001B[24m636.      2.91\u001B[38;5;246me\u001B[39m 9    25.5    \u001B[4m3\u001B[24m\u001B[4m8\u001B[24m248.   0.050\u001B[4m0\u001B[24m       \u001B[4m7\u001B[24m\u001B[4m7\u001B[24m026\n\u001B[38;5;250m3\u001B[39m N            O            148\u001B[4m6\u001B[24m\u001B[4m4\u001B[24m\u001B[4m2\u001B[24m120  \u001B[4m2\u001B[24m\u001B[4m2\u001B[24m\u001B[4m2\u001B[24m903\u001B[4m5\u001B[24m\u001B[4m6\u001B[24m\u001B[4m2\u001B[24m619.  \u001B[4m2\u001B[24m\u001B[4m1\u001B[24m\u001B[4m1\u001B[24m762\u001B[4m3\u001B[",
        "24m\u001B[4m1\u001B[24m\u001B[4m8\u001B[24m146.      2.20\u001B[38;5;246me\u001B[39m11    25.5    \u001B[4m3\u001B[24m\u001B[4m8\u001B[24m233.   0.050\u001B[4m0\u001B[24m     5\u001B[4m8\u001B[24m\u001B[4m3\u001B[24m\u001B[4m0\u001B[24m202\n\u001B[38;5;250m4\u001B[39m R            F             75\u001B[4m5\u001B[24m\u001B[4m7\u001B[24m\u001B[4m7\u001B[24m628  \u001B[4m1\u001B[24m\u001B[4m1\u001B[24m\u001B[4m3\u001B[24m351\u001B[4m9\u001B[24m\u001B[4m1\u001B[24m\u001B[4m4\u001B[24m218.  \u001B[4m1\u001B[24m\u001B[4m0\u001B[24m\u001B[4m7\u001B[24m688\u001B[4m0\u001B[24m\u001B[4m8\u001B[24m\u001B[4m1\u001B[24m811.      1.12\u001B[38;5;246me\u001B[39m11    25.5    \u001B[4m3\u001B[24m\u001B[4m8\u001B[24m263.   0.050\u001B[4m0\u001B[24m     2\u001B[4m9\u001B[24m\u001B[4m6\u001B[24m\u001B[4m2\u001B[24m417\n",
        "> ",
        "invisible(tpch_01_na((as_duckplyr_df(lineitem))))",
        "materializing:\n---------------------\n--- Relation Tree ---\n---------------------\nProjection [l_returnflag as l_returnflag, l_linestatus as l_linestatus, l_quantity as l_quantity, l_extendedprice as l_extendedprice, l_discount as l_discount, l_tax as l_tax]\n  Filter [<=(l_shipdate, '1998-09-02'::DATE)]\n    Projection [l_shipdate as l_shipdate, l_returnflag as l_returnflag, l_linestatus as l_linestatus, l_quantity as l_quantity, l_extendedprice as l_extendedprice, l_discount as l_discount, l_tax as l_tax]\n   ",
        "   r_dataframe_scan(0x1ec14902878)\n\n---------------------\n-- Result Columns  --\n---------------------\n- l_returnflag (VARCHAR)\n- l_linestatus (VARCHAR)\n- l_quantity (DOUBLE)\n- l_extendedprice (DOUBLE)\n- l_discount (DOUBLE)\n- l_tax (DOUBLE)\n\n",
        "> ",
        "options(duckdb.materialize_message = FALSE)",
        "> ",
        "tpch_01_na(as_duckplyr_df(lineitem))",
        "\u001B[38;5;246m# A tibble: 4 × 10\u001B[39m\n  l_returnflag l_linestatus   sum_qty sum_base_price sum_disc_price   sum_charge avg_qty avg_price avg_disc count_order\n  \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m        \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m            \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m          \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m          \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m        \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m   \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m     \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m    \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m       \u001B[3m\u001B[38;5;246m<i",
        "nt>\u001B[39m\u001B[23m\n\u001B[38;5;250m1\u001B[39m A            F             75\u001B[4m4\u001B[24m\u001B[4m7\u001B[24m\u001B[4m8\u001B[24m173  \u001B[4m1\u001B[24m\u001B[4m1\u001B[24m\u001B[4m3\u001B[24m197\u001B[4m3\u001B[24m\u001B[4m3\u001B[24m\u001B[4m1\u001B[24m346.  \u001B[4m1\u001B[24m\u001B[4m0\u001B[24m\u001B[4m7\u001B[24m536\u001B[4m4\u001B[24m\u001B[4m0\u001B[24m\u001B[4m8\u001B[24m207.      1.12\u001B[38;5;246me\u001B[39m11    25.5    \u001B[4m3\u001B[24m\u001B[4m8\u001B[24m252.   0.050\u001B[4m0\u001B[24m     2\u001B[4m9\u001B[24m\u001B[4m5\u001B[24m\u001B[4m9\u001B[24m267\n\u001B[38;5;250m2\u001B[39m N            F              1\u001B[4m9\u001B[24m\u001B[4m6\u001B[24m\u001B[4m6\u001B[24m480    \u001B[4m2\u001B[24m946\u001B[4m1\u001B[24m\u001B[4m1\u001B[24m\u001B[4m4\u001B[24m827.    \u001B[4m2\u001B[24m798\u001B[4m7\u001B[24",
        "m\u001B[4m9\u001B[24m\u001B[4m6\u001B[24m636.      2.91\u001B[38;5;246me\u001B[39m 9    25.5    \u001B[4m3\u001B[24m\u001B[4m8\u001B[24m248.   0.050\u001B[4m0\u001B[24m       \u001B[4m7\u001B[24m\u001B[4m7\u001B[24m026\n\u001B[38;5;250m3\u001B[39m N            O            148\u001B[4m6\u001B[24m\u001B[4m4\u001B[24m\u001B[4m2\u001B[24m120  \u001B[4m2\u001B[24m\u001B[4m2\u001B[24m\u001B[4m2\u001B[24m903\u001B[4m5\u001B[24m\u001B[4m6\u001B[24m\u001B[4m2\u001B[24m619.  \u001B[4m2\u001B[24m\u001B[4m1\u001B[24m\u001B[4m1\u001B[24m762\u001B[4m3\u001B[24m\u001B[4m1\u001B[24m\u001B[4m8\u001B[24m146.      2.20\u001B[38;5;246me\u001B[39m11    25.5    \u001B[4m3\u001B[24m\u001B[4m8\u001B[24m233.   0.050\u001B[4m0\u001B[24m     5\u001B[4m8\u001B[24m\u001B[4m3\u001B[24m\u001B[4m0\u001B[24m202\n\u001B[38;5;250m4\u001B[39m R            F",
        "             75\u001B[4m5\u001B[24m\u001B[4m7\u001B[24m\u001B[4m7\u001B[24m628  \u001B[4m1\u001B[24m\u001B[4m1\u001B[24m\u001B[4m3\u001B[24m351\u001B[4m9\u001B[24m\u001B[4m1\u001B[24m\u001B[4m4\u001B[24m218.  \u001B[4m1\u001B[24m\u001B[4m0\u001B[24m\u001B[4m7\u001B[24m688\u001B[4m0\u001B[24m\u001B[4m8\u001B[24m\u001B[4m1\u001B[24m811.      1.12\u001B[38;5;246me\u001B[39m11    25.5    \u001B[4m3\u001B[24m\u001B[4m8\u001B[24m263.   0.050\u001B[4m0\u001B[24m     2\u001B[4m9\u001B[24m\u001B[4m6\u001B[24m\u001B[4m2\u001B[24m417\n",
        "> ",
        "tpch_query_1",
        "\u001B[38;5;246m# A tibble: 3 × 13\u001B[39m\n  expression     min   median `itr/sec` mem_alloc `gc/sec` n_itr  n_gc total_time result memory     time       gc      \n  \u001B[3m\u001B[38;5;246m<bch:expr>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<bch:t>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<bch:tm>\u001B[39m\u001B[23m     \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<bch:byt>\u001B[39m\u001B[23m    \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<int>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m   \u001B[3m\u001B[38;5;246m<bch:tm>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<list>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<l",
        "ist>\u001B[39m\u001B[23m     \u001B[3m\u001B[38;5;246m<list>\u001B[39m\u001B[23m     \u001B[3m\u001B[38;5;246m<list>\u001B[39m\u001B[23m  \n\u001B[38;5;250m1\u001B[39m dplyr        2.04s    2.25s     0.456    2.33GB    1.37      3     9      6.59s \u001B[38;5;246m<NULL>\u001B[39m \u001B[38;5;246m<Rprofmem>\u001B[39m \u001B[38;5;246m<bench_tm>\u001B[39m \u001B[38;5;246m<tibble>\u001B[39m\n\u001B[38;5;250m2\u001B[39m duckplyr     6.01s    6.35s     0.149    1.67GB    0.224     4     6      26.8s \u001B[38;5;246m<NULL>\u001B[39m \u001B[38;5;246m<Rprofmem>\u001B[39m \u001B[38;5;246m<bench_tm>\u001B[39m \u001B[38;5;246m<tibble>\u001B[39m\n\u001B[38;5;250m3\u001B[39m duckd",
        "b     389.2ms 463.16ms     1.53      6.2MB    0.383     8     2      5.22s \u001B[38;5;246m<NULL>\u001B[39m \u001B[38;5;246m<Rprofmem>\u001B[39m \u001B[38;5;246m<bench_tm>\u001B[39m \u001B[38;5;246m<tibble>\u001B[39m\n",
        "> ",
        "tpch_query_1$median",
        "[1]   2.25s    6.35s  463.16ms\n",
        "> ",
        "glue::glue(\"dplyr mediana {tpch_query_1$median[tpch_query_1$expression == \"dplyr\"]}\")",
        "Error: unexpected symbol in \"glue::glue(\"dplyr mediana {tpch_query_1$median[tpch_query_1$expression == \"dplyr\"\n",
        "> ",
        "glue::glue(\"dplyr mediana {tpch_query_1$median[tpch_query_1$expression == 'dplyr']}\")",
        "> ",
        "print(glue::glue(\"dplyr mediana {tpch_query_1$median[tpch_query_1$expression == 'dplyr']}\"))",
        "> ",
        "tpch_query_1$median[tpch_query_1$expression == 'dplyr']",
        "character(0)\n",
        "> ",
        "tpch_query_1$expression == 'dplyr'",
        "   dplyr duckplyr   duckdb \n   FALSE    FALSE    FALSE \n",
        "> ",
        "tpch_query_1$expression",
        "$dplyr\ntpch_01(lineitem)\n\n$duckplyr\ntpch_01(as_duckplyr_df(lineitem))\n\n$duckdb\ntbl(con, \"lineitem\") %>% tpch_01()\n\nattr(,\"description\")\n[1] \"dplyr\"    \"duckplyr\" \"duckdb\"  \n",
        "> ",
        "tpch_query_1$expression$duckdb",
        "tbl(con, \"lineitem\") %>% tpch_01()\n",
        "> ",
        "description(tpch_query_1$expression)",
        "Error in description(tpch_query_1$expression) : \n  could not find function \"description\"\n",
        "> ",
        "tpch_query_1$expression$description",
        "NULL\n",
        "> ",
        "tpch_query_1$expression",
        "$dplyr\ntpch_01(lineitem)\n\n$duckplyr\ntpch_01(as_duckplyr_df(lineitem))\n\n$duckdb\ntbl(con, \"lineitem\") %>% tpch_01()\n\nattr(,\"description\")\n[1] \"dplyr\"    \"duckplyr\" \"duckdb\"  \n",
        "> ",
        "which(tpch_query_1$expression, \"dplyr\")",
        "Error in which(tpch_query_1$expression, \"dplyr\") : \n  argument to 'which' is not logical\n",
        "> ",
        "?which",
        "> ",
        "?mark",
        "> ",
        "names(tpch_query_1$expression)",
        "[1] \"dplyr\"    \"duckplyr\" \"duckdb\"  \n",
        "> ",
        "names(tpch_query_1$expression) == \"dplyr\"",
        "[1]  TRUE FALSE FALSE\n",
        "> ",
        "print(glue::glue(\"dplyr mediana {tpch_query_1$median[names(tpch_query_1$expression) == 'dplyr']}\"))",
        "dplyr mediana 2.25s\n",
        "> ",
        "autoplot(tpch_query_1) + ",
        "+ ",
        "  theme(axis.text.x = element_text(size = 17),",
        "+ ",
        "        axis.text.y = element_text(size = 17)) + ",
        "+ ",
        "  labs(title = \"TPC-H Query 1 rezultatai\", ",
        "+ ",
        "       subtitle = glue::glue(\"dplyr mediana {tpch_query_1$median[names(tpch_query_1$expression) == 'dplyr']}, duckplyr mediana {tpch_query_1$median[names(tpch_query_1$expression) == 'duckplyr']}, duckdb mediana {tpch_query_1$median[names(tpch_query_1$expression) == 'duckdb']}\"))",
        "> ",
        "dataset <- \"https://static.data.gouv.fr/resources/bureaux-de-vote-et-adresses-de-leurs-electeurs/20230626-135723/table-adresses-reu.parquet\"",
        "> ",
        "dbExecute(con, \"INSTALL httpfs\")",
        "[1] 0\n",
        "> ",
        "dbExecute(con, \"LOAD httpfs\")",
        "Error: rapi_execute: Failed to run query\nError: IO Error: Extension \"C:\\Users\\alabu\\AppData\\Roaming\\R\\data\\R\\duckdb\\.duckdb\\extensions\\v0.9.2\\windows_amd64_rtools\\httpfs.duckdb_extension\" could not be loaded: The specified module could not be found.\r\n",
        "> ",
        "dbExecute(con, \"INSTALL httpfs\")",
        "[1] 0\n",
        "> ",
        "> ",
        "dbExecute(con, \"LOAD httpfs\")",
        "Error: rapi_execute: Failed to run query\nError: IO Error: Extension \"C:\\Users\\alabu\\AppData\\Roaming\\R\\data\\R\\duckdb\\.duckdb\\extensions\\v0.9.2\\windows_amd64_rtools\\httpfs.duckdb_extension\" could not be loaded: The specified module could not be found.\r\n",
        "> ",
        "dbSendStatement(con, \"LOAD httpfs;\")",
        "Error: rapi_execute: Failed to run query\nError: IO Error: Extension \"C:\\Users\\alabu\\AppData\\Roaming\\R\\data\\R\\duckdb\\.duckdb\\extensions\\v0.9.2\\windows_amd64_rtools\\httpfs.duckdb_extension\" could not be loaded: The specified module could not be found.\r\n",
        "> ",
        "dbSendStatement(con, \"INSTALL httpfs;\")",
        "<duckdb_result 95af0 connection=4ea50 statement='INSTALL httpfs;'>\n",
        "> ",
        "dbSendStatement(con, \"LOAD httpfs;\")",
        "Error: rapi_execute: Failed to run query\nError: IO Error: Extension \"C:\\Users\\alabu\\AppData\\Roaming\\R\\data\\R\\duckdb\\.duckdb\\extensions\\v0.9.2\\windows_amd64_rtools\\httpfs.duckdb_extension\" could not be loaded: The specified module could not be found.\r\n",
        "> ",
        "dbSendQuery(con, \"select * from read_parquet('https://static.data.gouv.fr/resources/bureaux-de-vote-et-adresses-de-leurs-electeurs/20230626-135723/table-adresses-reu.parquet') limit 5\")",
        "Error: rapi_prepare: Failed to prepare query select * from read_parquet('https://static.data.gouv.fr/resources/bureaux-de-vote-et-adresses-de-leurs-electeurs/20230626-135723/table-adresses-reu.parquet') limit 5\nError: Missing Extension Error: File https://static.data.gouv.fr/resources/bureaux-de-vote-et-adresses-de-leurs-electeurs/20230626-135723/table-adresses-reu.parquet requires the extension httpfs to be loaded\n\nPlease try installing and loading the httpfs extension by running:\nINSTALL httpfs;\nLOAD http",
        "fs;\n\nAlternatively, consider enabling auto-install and auto-load by running:\nSET autoinstall_known_extensions=1;\nSET autoload_known_extensions=1;\n",
        "> ",
        "dbExecute(con, \"INSTALL httpfs;\")",
        "[1] 0\n",
        "> ",
        "dbExecute(con, \"LOAD httpfs;\")",
        "Error: rapi_execute: Failed to run query\nError: IO Error: Extension \"C:\\Users\\alabu\\AppData\\Roaming\\R\\data\\R\\duckdb\\.duckdb\\extensions\\v0.9.2\\windows_amd64_rtools\\httpfs.duckdb_extension\" could not be loaded: The specified module could not be found.\r\n",
        "> ",
        "con <- dbConnect(duckdb::duckdb(), \":memory:\")",
        "> ",
        "dbExecute(con, \"INSTALL httpfs;\")",
        "[1] 0\n",
        "> ",
        "dbExecute(con, \"LOAD httpfs;\")",
        "Error: rapi_execute: Failed to run query\nError: IO Error: Extension \"C:\\Users\\alabu\\AppData\\Roaming\\R\\data\\R\\duckdb\\.duckdb\\extensions\\v0.9.2\\windows_amd64_rtools\\httpfs.duckdb_extension\" could not be loaded: The specified module could not be found.\r\n",
        "\nRestarting R session...\n\n"
    ]
}